/* Підключення фрифтів */

/* Google Fonts (Plugin) */
/* @import url("https://fonts.googleapis.com/css?family=Manrope:regular,500,600,700&display=swap"); */

/* Локальне підключення шрифтів */
@import url("fonts.css");

/* Скидання стилів */
@import url("reset.css");

/* Основні стилі */
body {
	font-family: "Gilroy", sans-serif;
	background-color: #333;
	color: #fff;
}
.wrapper {
	min-height: 100%;
	overflow: clip; /* clip */

	display: flex;
	flex-direction: column;
}
.wrapper > main {
	flex-grow: 1;
}

[class*="__container"] {
	max-width: 1170px;
	margin: 0 auto;
	padding-inline: 15px;
	/* 
	padding-left: 15px;
	padding-right: 15px;
	*/
}
.page {
	padding: 30px;
}
[class*="--margin"] {
	margin-bottom: 50px;
}

/* --------------------- */

/*
FLEX (Flexbox) - це цілий модуль,
що містить у собі набір властивостей 
та їх значень як для батьківського 
об'єкту (flex-контейнера), так і для 
його дочірніх елементів (flex-елементів). 

Використовується для побудови конструкцій -
упорядкування контенту в рядки та колонки,
та керування ним.

Основною перевагою гнучкої FLEX розмітки 
є можливість змінювати ширину/висоту простір 
навколо та порядок flex-елементів, для того, 
щоб найкращим чином заповнити доступний простір 
flex-контейнера та полегшувати адаптивність
*/

/* FLEX-контейнер */
.flex {
	padding: 15px;
	background-color: #794f45;

	/* Властивості FLEX-контейнера */
	/* display: flex; */
	/* display: inline-flex; */
	display: flex;

	/* 
	display: flex/inline-flex;
	1) Визначає flex-контейнер,
	блочний або блочний-рядковий (залежить від значення). 
	2) Перетворює всі свої беспосередні дочірні 
	елементи у flex-елементи.
	3) Будує конструкцію
	*/

	/*
	
	flex-wrap
	Визначає, чи зможуть flex-елементи переміщатися 
	на наступні рядки, коли перестають поміщатися 
	всередині flex-контейнера.

	nowrap - (за замовченням) Flex-елементи не можуть 
	переміщатися на наступні рядки flex-контейнера.
	wrap - Flex-елементи зможуть переміщатися на 
	наступні рядки flex-контейнера.
	wrap-reverse - Flex-елементи зможуть переміщатися 
	на наступні рядки flex-контейнера, 
	але у зворотному порядку.
	*/
	flex-wrap: wrap;

	/*
	justify-content

	Визначає вирівнювання (flex-елементів) вздовж основної осі 
	(напрямок залежить від значення властивості flex-direction).
	
	flex-start - Значення за замовчуванням (не потрібно вказувати). 
	Flex-елементи притискаються до початку осі.
	flex-end - Flex-елементи притискаються вкінець осі.
	center - Flex-елементи розташовуються в центрі основної осі.

	space-between - Flex-елементи розміщуються 
	поступово по основній осі. 
	Перший елемент знаходиться на початку осі,
	останній елемент знаходиться наприкінці осі.
	Між елементами постійно однаковий простір
	space-around - Flex-елементи розташовуються рівномірно 
	по основній осі. До кожного flex-елементу 
	додається простір ліворуч і праворуч.
	space-evenly - Flex-елементи розташовуються рівномірно по 
	основній осі з однаковим простором навколо них.
	*/

	/* justify-content: flex-start; */

	/*
	align-items
	Визначає вирівнювання вздовж поперечної (другорядної) осі 
	(напрямок залежить від значення властивості flex-direction).
	stretch - Значення за замовчуванням (не потрібно вказувати). 
	Flex-елементи розтягуються весь розмір поперечної осі 
	flex-контейнера.
	flex-start - Flex-елементи притискаються до 
	початку поперечної осі.
	flex-end - Flex-елементи притискаються вкінець поперечної осі.
	center - Flex-елементи по центру
	*/

	/* align-items: center; */

	/*
	flex-direction
	Встановлює основну вісь,
	таким чином визначає напрямок flex-елементів,
	розташованих у flex-контейнері.
	row - Значення за замовчуванням (не потрібно вказувати). 
	Основна вісь горизонтальна. Всі flex-елементи 
	розташуються ліворуч по горизонталі.
	row-reverse - змінює напрям горизонтального вектору
	column - змінює головну вісь на вертикальну (зверху вниз)
	другорядна зліва на право.
	column-reverse - змінює головну вісь на вертикальну (знизу вверх)
	другорядна зліва на право.
	*/

	/* align-items: center; */
	/* justify-content: space-evenly; */
	/* align-items: stretch; */
	/* flex-direction: column; */

	/* Поєднання flex-wrap flex-direction */
	/* flex-flow: flex-wrap flex-direction */
	/* flex-flow: column wrap; */

	/* 
	gap
	Проміжок (відстань) між FLEX-елементами
	(Не залежить від flex-direction)
	*/

	gap: 20px;

	/* Між колонками */
	/* column-gap: 15px; */
	/* Між рядками */
	/* row-gap: 30px; */
}

/* 
Властивості FLEX – елементів. 
Застосовуються для flex-елемента,
дочірнього об'єкта flex-контейнера
*/

/* FLEX-елемент(и) */
.flex__item {
	padding: 25px;
	background-color: #77608d;
	font-size: 20px;

	/*
	flex-grow - 0 заборонено. 1 дозволено. (за замовченням - 0) 
	Визначає можливість елемента збільшуватись 
	(більше ніж flex-basis)
	у розмірі, при необхідності заповнюючи весь 
	flex-контейнер.

	flex-shrink - 0 заборонено. 1 дозволено. (за замовченням - 1)
	Визначає можливість елемента зменшуватись у розмірі 
	(меньше ніж flex-basis)

	flex-basis - Визначає базовий розмір елемента 
	за замовченням, до розподілу простору, що залишився. 
	Значення можуть бути у відсотках пікселях тощо.
	auto (за замовченням) - розмір по контенту
	*/

	/* flex-grow: 1; */
	/* flex-shrink: 1; */
	/* flex-basis: 1px; */

	/* Універсальна властівість FLEX */
	/* flex: flex-grow flex-shrink flex-basis */
	/* flex: 1 1 1px; */

	/*
	order
	Керує порядком,
	в якому розташовуються flex-елементи 
	всередині flex-контейнера.
	При зміні порядку хоча б для одного flex-елементу,
	варто прописувати order усім flex-елементам,
	навіть тим які лишаються на своєму місці.
	*/
}
.flex__item:nth-child(1) {
	/*
	flex-grow: 0;
	flex-shrink: 0;
	flex-basis: 200px;
	*/

	order: 2;
}

.flex__item:nth-child(2) {
	/*
	align-self
	Перевизначає для конкретного flex-елемента 
	вирівнювання вздовж поперечної осі 
	(напрямок залежить від значення якості flex-direction).
	*/
	/* align-self: flex-end; */

	order: 3;
}

.flex__item:nth-child(3) {
	order: 1;
}
.flex__item:nth-child(4) {
	order: 4;
}

/* Практика */

/* FLEX-контейнер */
.row {
	display: flex;
	flex-wrap: wrap;
	gap: 20px;
}
/* FLEX-елемент */
/* а також FLEX-контейнер */
.column {
	background-color: #7a956b;
	padding: 15px;

	flex-grow: 1;
	flex-shrink: 1;
	/* flex-basis: 254px; */
	inline-size: 254px;

	display: flex;
	flex-direction: column;
	gap: 20px;
}
.text {
	flex-grow: 1;
}
.link {
	color: red;
}
.link:hover {
	text-decoration: underline;
}

.image {
	width: 100%;
}

/* 
Використання розмірів 
разом з FLEX 
*/

/* FLEX-контейнер */
.some-link {
	display: inline-flex;
	align-items: center;
	gap: 15px;
}
/* FLEX-елемент */
.some-link::before {
	content: "";
	flex-shrink: 0;
	/* width: 30px; */
	inline-size: 30px;
	/* height: 30px; */
	block-size: 30px;
	background: url("../img/check.svg") 0 0 / 100% no-repeat;
}
